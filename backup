#!/bin/bash

set -e errexit
set -o pipefail
set -o nounset

BACKUP_DIR="${HOME}/backup/docker-volumes"
VERSIONS=3

LIST_CONTAINERS=""
mapfile -t LIST_CONTAINERS < <(docker ps -a --format '{{.Names}}')

if [ ! -d "$BACKUP_DIR" ]; then
    mkdir -p "$BACKUP_DIR" && chmod -R 700 $(dirname "$BACKUP_DIR")
fi

backup_volume(){
    local name_container=$1
    local timestamp=$(date +"%Y-%m-%d_%H-%M")
    local volume_name=$(docker inspect -f '{{range .Mounts}}{{if eq .Type "volume"}}{{.Name}} {{end}}{{end}}' ${name_container} | xargs)
    local backup_name="${volume_name}_${timestamp}.tar.gz"
    local backup_end_point="${BACKUP_DIR}/${name_container}"

    if [ -z "$volume_name" ]; then
        printf "\nThe ${name_container} container has no mounted named volumes\n"
        return
    fi

    mkdir -p "$backup_end_point"

    if docker ps --filter "name=${name_container}" --filter "status=running" | grep -w "$name_container" > /dev/null; then
        docker stop ${name_container} > /dev/null
        printf "\nContainer ${name_container} is running\n"
    else
        printf "\nContainer ${name_container} is not running\n"
    fi

    docker run --rm -v $volume_name:/data -v $backup_end_point:/backup ubuntu tar --totals --verbose --verbose -c -z -f /backup/${backup_name} -C /data ./

    cleanup_backups "$backup_end_point"

    docker start "$name_container" >> /dev/null
}

cleanup_backups(){
    local path_backup=$1
    local count_backups=$(ls -1 "$path_backup" | wc -l)
    local backups_to_delete=""
    local count_backups_to_delete=$(($count_backups-$VERSIONS))

    if [ "$count_backups_to_delete" -gt 0 ]; then
        mapfile backups_to_delete < <(find "$path_backup" -type f -name "*.tar.gz" -printf '%T+ %p\n' | sort | head -n "$count_backups_to_delete" | cut -d ' ' -f 2-)

        printf "\n\nDeleting old backups...\n"

        for i in "${backups_to_delete[@]}"
        do
            rm --verbose --force ${i//$'\n'/}    
        done
    fi
}

for i in "${LIST_CONTAINERS[@]}"; do
    backup_volume $i
done